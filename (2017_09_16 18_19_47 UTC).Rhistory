for (i in 2:nrcodons){
print('codons start, nr of codons is' nrofcodons)
numcodstart[i]<-numcodstart[i-1]+3
}
}
#append(numeclcods,numcodstart, after=length(numeclcods))
#return(eclcods)
numcodstart
#numeclcods
}
numcodfun<-function(mydata){
if(mydata[[3]]==1){
print('+1 strand')
nrcodons<-(mydata[[4]]+1)/3
for (i in 2:nrcodons){
print('codons start, nr of codons is' nrofcodons)
numcodstart[i]<-numcodstart[i-1]+3
}
}
#append(numeclcods,numcodstart, after=length(numeclcods))
#return(eclcods)
numcodstart
#numeclcods
}
numcodfun<-function(mydata){
if(mydata[[3]]==1){
print('+1 strand')
nrcodons<-(mydata[[4]]+1)/3
for (i in 2:nrcodons){
print('codons start, nr of codons is' nrcodons)
numcodstart[i]<-numcodstart[i-1]+3
}
}
#append(numeclcods,numcodstart, after=length(numeclcods))
#return(eclcods)
#numcodstart
#numeclcods
}
numcodfun<-function(mydata){
if(mydata[[3]]==1){
print('+1 strand')
nrcodons<-(mydata[[4]]+1)/3
for (i in 2:nrcodons){
#print('codons start, nr of codons is' nrcodons)
numcodstart[i]<-numcodstart[i-1]+3
}
}
#append(numeclcods,numcodstart, after=length(numeclcods))
#return(eclcods)
#numcodstart
#numeclcods
}
numcodfun(eclgenes[1,])
numcodfun<-function(mydata){
if(mydata[[3]]==1){
print('+1 strand')
nrcodons<-(mydata[[4]]+1)/3
for (i in 2:nrcodons){
#print('codons start, nr of codons is' nrcodons)
numcodstart[i]<-numcodstart[i-1]+3
}
print('for loop ok')
}
#append(numeclcods,numcodstart, after=length(numeclcods))
#return(eclcods)
#numcodstart
#numeclcods
}
numcodfun(eclgenes[1,])
eclgencod<-apply(eclgenes,1,FUN=numcodfun)
codfun<-function(mydata){
if(mydata[['direction']]==1){
print('+1 strand')
nrcodons<-(mydata[['len']]+1)/3
for (i in 2:nrcodons){
codstart[i]<-codstart[i-1]+3
}
print('for loop ok')
}
append(eclcods,codstart, after=length(eclcods))
#return(eclcods)
codstart
eclcods
}
codfun(eclgenes[1,])
eclgencod<-apply(eclgenes,1,FUN=codfun)
head(eclgenfasta2)
system ('prodigal -h')
system('prodigal -i eclFasta.fasta -o eclGenCoord.fasta -d')
eclgenfasta2<-read.fasta('eclPredGen.fasta')
library(seqinr)
eclgenfasta2<-read.fasta('eclPredGen.fasta')
head(eclgenfasta2)
getSequence.SeqFastadna(eclgenfasta2)
system('prodigal -i eclFasta.fasta -o eclGenCoord.fasta -d eclGenSeqs.fasta')
eclgenfasta2<-read.fasta('eclPredGen.fasta')
eclgenseq<-read.fasta('eclGenSeqs.fasta')
head(eclgenseq)
getSequence(eclgenseq[[1])
eclannot[[1]]
typeof(eclannot)
eclsplit<-sapply(eclannot, function(x) strsplit(x,"#"))
eclsplit[[1]][2:3]
head(eclsplit)
eclcoord<-lapply(lapply(eclsplit, '[', 1:4),function(x) as.integer(x[2:4]))#taking the start and the stop and converting them into integers
head(eclcoord)
typeof(eclcoord)
eclgenes<-data.frame(t(sapply(eclcoord,c)))
eclgenes[[1]][2]
colnames(eclgenes)<-c('start','stop', 'direction')
head(eclgenes)
eclgenes$len=(eclgenes$stop-eclgenes$start)
#Getting codons from one strand
#calculating codons
#codons within a gene
c<-vector(mode='numeric')
dim(eclgenes)[1]
tail(eclgenes)
length(eclgenes[['start']])
#testfu<-function(mydata){
#  for (i in 1:dim(mydata)[1]){
#    c[i]=i
#  }
#return(c)
#}
#testfu(eclgenes)
(eclgenes$len[1]+1)/3
eclcods<-vector(mode='numeric')
a<-c(1,2,3)
eclcods[1]<-0
append(eclcods,a,after=length(eclcods))
codstart[1]<-eclgenes[['start']][1]
codfun<-function(mydata){
if(mydata[['direction']]==1){
print('+1 strand')
nrcodons<-(mydata[['len']]+1)/3
for (i in 2:nrcodons){
codstart[i]<-codstart[i-1]+3
}
print('for loop ok')
}
append(eclcods,codstart, after=length(eclcods))
#return(eclcods)
codstart
eclcods
}
codfun(eclgenes[1,])
eclgencod<-apply(eclgenes,1,FUN=codfun) #General looping works, but output is empty, and does not return codstart
head(codstart)
getSequence(eclgenseq[[1]])
threes<-function(mydata){
dna<-getSequence(mydata)
everythird<-dna[seq(1,length(dna),3)]
}
eclgc3s<-sapply(eclgenseq,FUN=threes)
head(eclgc3)
eclgc3s<-apply(eclgenseq,1,FUN=threes)
head(eclgenseq)
typeof(eclgenseq)
oneseq<-getSequence(eclgenseq[[1]])
thirdstry<-oneseq[seq(1,length(oneseq),3)]
thirdstry
eclgc3s<-apply(eclgenseq[[1]],1,FUN=threes)
threes<-function(mydata){
dna<-getSequence(mydata)
everythird<-dna[seq(1,length(dna),3)]
}
eclgc3s<-apply(eclgenseq[[1]],1,FUN=threes)
threes<-function(mydata){
dna<-getSequence(mydata)
print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
}
eclgc3s<-apply(eclgenseq[[1]],1,FUN=threes)
eclgc3s<-sapply(eclgenseq[1],FUN=threes)
head(eclgc3)
sapply(eclgenseq[1],FUN=threes)
eclgc3s<-sapply(eclgenseq,FUN=threes)
outhird<-vector(mode='character')
threes<-function(mydata){
dna<-getSequence(mydata)
print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
append(outhird,everythird, after=length(outhird))
outhird
}
eclgc3s<-sapply(eclgenseq[1],FUN=threes)
head(eclgc3)
head(outhird)
eclgc3s<-sapply(eclgenseq[1],FUN=threes)
head(outhird)
sapply(eclgenseq[1],FUN=threes)
threes<-function(mydata){
dna<-getSequence(mydata)
print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
#append(outhird,everythird, after=length(outhird))
#outhird
}
sapply(eclgenseq[1],FUN=threes)
threes<-function(mydata){
dna<-getSequence(mydata)
print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
#append(outhird,everythird, after=length(outhird))
#outhird
t(everythird)
}
sapply(eclgenseq[1],FUN=threes)
thirdstry
head(sapply(eclgenseq,FUN=threes))
typeof(oneseq)
oneseq
oneseq[1]
typeof(eclgenseq)
head(lapply(eclgenseq,FUN=threes))
threes<-function(mydata){
dna<-getSequence(mydata)
print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
#append(outhird,everythird, after=length(outhird))
#outhird
as.vector(everythird)
}
head(lapply(eclgenseq,FUN=threes))
head(everythird)
headgc3<-head(lapply(eclgenseq,FUN=threes))
threes<-function(mydata){
dna<-getSequence(mydata)
#print('getSeq works')
everythird<-dna[seq(1,length(dna),3)]
#append(outhird,everythird, after=length(outhird))
#outhird
as.vector(everythird)
}
headgc3<-head(lapply(eclgenseq,FUN=threes))
headgc3
eclgc3s<-unlist(lapply(eclgenseq,FUN=threes))
head(eclgc3s)
eclgc3s<-lapply(eclgenseq,FUN=threes)
head(eclgc3s)
eclgc3s[1]
typeof(eclgc3s[1])
eclgc3s<-lapply(rapply(eclgenseq,FUN=threes))
eclgc3s<-lapply(rapply(eclgenseq,FUN=threes, how='list'))
eclgc3s<-lapply(rapply(eclgenseq,f=threes, how='list'))
eclgc3s<-lapply(rapply(eclgenseq,threes, how='list'))
eclgc3s<-lapply(rapply(eclgenseq,function(x) threes, how='list'))
eclgc3s<-lapply(eclgenseq,FUN=threes)
eclgc3s<-unlist(lapply(eclgenseq,FUN=threes)recursive=TRUE)
eclgc3s<-unlist(lapply(eclgenseq,FUN=threes),recursive=TRUE)
head(eclgc3s)
eclgc3s<-lapply(eclgenseq,FUN=threes)
head(eclgc3s)
eclgc3s[1]
eclgc3s[[1]][1]
outgc3<-vector(mode='numeric')
gc3<-function(mycodons){
for (i in 1:length(mycodons)){
if (mycodons[i] == "g"){
append(outgc3,1,length(outgc3))
} else if (mycodons[i] =="c"){
append(outgc3,-1,length(outgc3))
} else
append(outgc3,0,length(outgc3))
}
}
gc3y<-lapply(eclgc3s,FUN=gc3)
head(gc3y)
gc3<-function(mycodons){
for (i in 1:length(mycodons)){
if (mycodons[i] == "g"){
append(outgc3,1,length(outgc3))
} else if (mycodons[i] =="c"){
append(outgc3,-1,length(outgc3))
} else
append(outgc3,0,length(outgc3))
}
outgc3
}
gc3y<-lapply(eclgc3s,FUN=gc3)
head(gc3y)
length(eclgc3s[1])
length(eclgc3s[[1]][1])
length(eclgc3s[[1]][2])
eclgc3s[[1]][2]
eclgc3s[[1]]
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]])){
if (mycodons[i] == "g"){
append(outgc3,1,length(outgc3))
} else if (mycodons[i] =="c"){
append(outgc3,-1,length(outgc3))
} else
append(outgc3,0,length(outgc3))
}
outgc3
}
gc3y<-outgc3(eclgc3s)
gc3y<-gc3(eclgc3s)
head(gc3y)
append(outgc3,1,length(outgc3))
outgc3
outgc3[1]
outgc3<-vector(mode='numeric')
append(outgc3,1,after=length(outgc3))
outgc3[1]
outgc3
append(outgc3,1,after=1
outgc3
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]])){
if (mycodons[i] == "g"){
append(outgc3,1,after=length(outgc3))
} else if (mycodons[i] =="c"){
append(outgc3,-1,after=length(outgc3))
} else
append(outgc3,0,after=length(outgc3))
}
outgc3
}
gc3y<-gc3(eclgc3s)
append(outgc3,1,after=1)
outgc3
append(outgc3,1)
outgc3
x<-vector()
append(x,1)
outgc3
x<-1:5
append(x,1)
c(x,1)
outgc3<-vector(mode='numeric')
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]])){
if (mycodons[i] == "g"){
c(outgc3,1)
} else if (mycodons[i] =="c"){
c(outgc3,-1)
} else
c(outgc3,0)
}
outgc3
}
gc3y<-gc3(eclgc3s[1:5])
head(gc3y)
outgc3<-vector()
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]])){
if (mycodons[i] == "g"){
c(outgc3,1)
} else if (mycodons[i] =="c"){
c(outgc3,-1)
} else
c(outgc3,0)
}
outgc3
}
gc3(eclgc3s[1:5])
eclgc3s[[1]]
eclgc3s[1]
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]][1])){
if (mycodons[i] == "g"){
c(outgc3,1)
} else if (mycodons[i] =="c"){
c(outgc3,-1)
} else
c(outgc3,0)
}
outgc3
}
gc3(eclgc3s[1:5])
length(eclgc3s[1])
length(eclgc3s[[1]][1])
eclgc3s[[1]][1]
eclgc3s[1]
eclgc3s[[1]]
eclgc3s[[2]]
length(eclgc3s[[2]])
length(eclgc3s[[2]][1])
gc3<-function(mycodons){
for (j in 1:length(mycodons))
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,-1)
} else
c(outgc3,0)
}
outgc3
}
gc3(eclgc3s[1:5])
eclgc3s[[2]][1]
eclgc3s[[2]][4]
eclgc3s[[1]][4]
eclgc3s[[1]][4]=='t'
eclgc3s[[1]][4]=="t"
length(eclgc3s[[2]])
length(eclgc3s[[1]])
length(eclgc3s)
length(eclgc3s[1:2])
outgc3<-vector(mode = 'numeric')
gc3<-function(mycodons){
for (j in 1:length(mycodons)){
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,(-1))
} else
c(outgc3,0)
}
outgc3
}
}
gc3(eclgc3s[1:2])
gc3y<-gc3(eclgc3s[1:2])
head(gc3y)
gc3<-function(mycodons){
for (j in 1:length(mycodons)){
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,(-1))
} else
c(outgc3,0)
}
}
outgc3
}
gc3y<-gc3(eclgc3s[1:2])
head(gc3y)
debug(gc3)
debug(gc3(eclgc3s[1:2]))
gc3<-function(mycodons){
outgc3<-vector(mode = 'numeric')
for (j in 1:length(mycodons)){
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,(-1))
} else
c(outgc3,0)
}
}
outgc3
}
gc3y<-gc3(eclgc3s[1:2])
debug(gc3(eclgc3s))
gc3y<-gc3(eclgc3s[1:2])
debug(gc3(eclgc3s[1:2]))
gc3(eclgc3s[1:2])
gc3<-function(mycodons){
outgc3<-vector(mode = 'numeric')
for (j in 1:length(mycodons)){
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,(-1))
} else{
c(outgc3,0)
}
}
}
outgc3
}
gc3(eclgc3s[1:2])
row.names(eclgc3s)
head(eclgc3s)
eclgc3s[1]
eclgc3s[[1]]
length(eclgc3s)
gc3<-function(mycodons){
outgc3<-vector('list')
for (j in 1:length(mycodons)){
for (i in 1:length(mycodons[[j]])){
if (mycodons[[j]][i] == "g"){
c(outgc3,1)
} else if (mycodons[[j]][i] =="c"){
c(outgc3,(-1))
} else{
c(outgc3,0)
}
}
}
outgc3
}
gc3y<-gc3(eclgc3s[1:2])
gc3(eclgc3s[1:2])
l2 <- list(a = "a", b = as.name("b"), c = pi+2i)
l2
unlist(l2) # remains a list
head(eclgc3s)
flatten(eclgc3s)
library(rlang)
flatten(eclgc3s)
flatgc3<-flatten(eclgc3s)
flatter<-flatten(flatgc3)
head(flatter)
clear(flatter)
remove(flatter)
remove(flatgc3)
